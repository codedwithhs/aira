name: Project Board Automation

on:
  issues:
    types: [opened, closed, assigned, labeled]
  pull_request:
    types: [opened, closed, ready_for_review, converted_to_draft]

env:
  PROJECT_ID: PVT_kwHOAGEyUM4A_SBA  # Your project ID

jobs:
  update-project:
    runs-on: ubuntu-latest
    steps:
      - name: Auto-move items
        uses: actions/github-script@v7
        with:
          # üîë KEY FIX: Use personal access token instead of GITHUB_TOKEN
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const PROJECT_ID = process.env.PROJECT_ID;
            
            // Helper function to get project info with better error handling
            async function getProjectInfo() {
              console.log(`üîç Looking up project by ID: ${PROJECT_ID}`);
              
              // Direct project lookup by ID
              const directQuery = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      id
                      title
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                          }
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              try {
                const result = await github.graphql(directQuery, {
                  projectId: PROJECT_ID
                });
                
                if (result.node) {
                  console.log(`‚úÖ Found project: ${result.node.title} (${result.node.id})`);
                  return result.node;
                } else {
                  throw new Error('Project ID resolved but returned null');
                }
              } catch (directError) {
                console.log('‚ùå Direct project lookup failed:', directError.message);
                
                // Enhanced fallback: Try multiple project scopes
                console.log('üîÑ Trying fallback approaches...');
                
                // Try viewer projects
                try {
                  const viewerQuery = `
                    query {
                      viewer {
                        login
                        projectsV2(first: 50) {
                          nodes {
                            id
                            title
                            fields(first: 20) {
                              nodes {
                                ... on ProjectV2Field {
                                  id
                                  name
                                }
                                ... on ProjectV2SingleSelectField {
                                  id
                                  name
                                  options {
                                    id
                                    name
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  `;
                  
                  const viewerResult = await github.graphql(viewerQuery);
                  console.log(`üë§ Authenticated as: ${viewerResult.viewer.login}`);
                  console.log(`üìã Found ${viewerResult.viewer.projectsV2.nodes.length} user projects`);
                  
                  const project = viewerResult.viewer.projectsV2.nodes.find(p => p.id === PROJECT_ID);
                  
                  if (project) {
                    console.log(`‚úÖ Found project via viewer: ${project.title}`);
                    return project;
                  }
                  
                  // Show available projects for debugging
                  if (viewerResult.viewer.projectsV2.nodes.length > 0) {
                    console.log('üìã Available user projects:');
                    viewerResult.viewer.projectsV2.nodes.forEach(p => {
                      console.log(`   - ${p.title} (${p.id})`);
                    });
                  }
                  
                } catch (viewerError) {
                  console.log('‚ùå Viewer query failed:', viewerError.message);
                }
                
                // Try organization projects
                try {
                  const orgQuery = `
                    query($owner: String!) {
                      organization(login: $owner) {
                        projectsV2(first: 50) {
                          nodes {
                            id
                            title
                            fields(first: 20) {
                              nodes {
                                ... on ProjectV2Field {
                                  id
                                  name
                                }
                                ... on ProjectV2SingleSelectField {
                                  id
                                  name
                                  options {
                                    id
                                    name
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  `;
                  
                  const orgResult = await github.graphql(orgQuery, {
                    owner: context.repo.owner
                  });
                  
                  console.log(`üè¢ Found ${orgResult.organization.projectsV2.nodes.length} org projects`);
                  
                  const project = orgResult.organization.projectsV2.nodes.find(p => p.id === PROJECT_ID);
                  
                  if (project) {
                    console.log(`‚úÖ Found project via organization: ${project.title}`);
                    return project;
                  }
                  
                  // Show available org projects
                  if (orgResult.organization.projectsV2.nodes.length > 0) {
                    console.log('üìã Available org projects:');
                    orgResult.organization.projectsV2.nodes.forEach(p => {
                      console.log(`   - ${p.title} (${p.id})`);
                    });
                  }
                  
                } catch (orgError) {
                  console.log('‚ùå Organization query failed:', orgError.message);
                }
                
                console.log('‚ùå Project not found in any scope');
                return null;
              }
            }
            
            // Helper function to get item ID for issue/PR
            async function getProjectItemId(contentId) {
              const projectInfo = await getProjectInfo();
              if (!projectInfo) {
                console.log('‚ùå Cannot get project item - project info unavailable');
                return null;
              }
              
              const query = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 200) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              id
                              number
                            }
                            ... on PullRequest {
                              id
                              number
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              try {
                const result = await github.graphql(query, {
                  projectId: projectInfo.id
                });
                
                const item = result.node.items.nodes.find(
                  item => item.content && item.content.id === contentId
                );
                
                if (item) {
                  console.log(`‚úÖ Found project item for content ${item.content.number}`);
                  return item.id;
                } else {
                  console.log(`‚ùå Content not found in project items`);
                  return null;
                }
              } catch (error) {
                console.log('‚ùå Error finding project item:', error.message);
                return null;
              }
            }
            
            // Helper function to add item to project
            async function addToProject(contentId) {
              const projectInfo = await getProjectInfo();
              if (!projectInfo) {
                console.log('‚ùå Cannot add to project - project info unavailable');
                return null;
              }
              
              const mutation = `
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                    item {
                      id
                    }
                  }
                }
              `;
              
              try {
                console.log(`üîÑ Adding content to project...`);
                const result = await github.graphql(mutation, {
                  projectId: projectInfo.id,
                  contentId
                });
                
                const itemId = result.addProjectV2ItemById.item.id;
                console.log(`‚úÖ Successfully added to project with item ID: ${itemId}`);
                return itemId;
              } catch (error) {
                console.log('‚ùå Error adding to project:', error.message);
                return null;
              }
            }
            
            // Helper function to update item status
            async function updateItemStatus(itemId, statusName) {
              const projectInfo = await getProjectInfo();
              if (!projectInfo) {
                console.log('‚ùå Cannot update status - project info unavailable');
                return;
              }
              
              const statusField = projectInfo.fields.nodes.find(
                field => field.name.toLowerCase() === 'status'
              );
              
              if (!statusField || !statusField.options) {
                console.log('‚ùå Status field not found');
                console.log('Available fields:', projectInfo.fields.nodes.map(f => f.name));
                return;
              }
              
              const statusOption = statusField.options.find(
                option => option.name.toLowerCase() === statusName.toLowerCase()
              );
              
              if (!statusOption) {
                console.log(`‚ùå Status option "${statusName}" not found`);
                console.log('Available status options:', statusField.options.map(o => o.name));
                return;
              }
              
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: $value
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              
              try {
                await github.graphql(mutation, {
                  projectId: projectInfo.id,
                  itemId,
                  fieldId: statusField.id,
                  value: {
                    singleSelectOptionId: statusOption.id
                  }
                });
                console.log(`‚úÖ Updated item status to: ${statusName}`);
              } catch (error) {
                console.log(`‚ùå Failed to update status to ${statusName}:`, error.message);
              }
            }
            
            // Helper function to get current item status
            async function getCurrentItemStatus(itemId) {
              const query = `
                query($itemId: ID!) {
                  node(id: $itemId) {
                    ... on ProjectV2Item {
                      fieldValues(first: 20) {
                        nodes {
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            name
                            field {
                              ... on ProjectV2SingleSelectField {
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              try {
                const result = await github.graphql(query, { itemId });
                const statusField = result.node.fieldValues.nodes.find(
                  field => field.field && field.field.name.toLowerCase() === 'status'
                );
                return statusField ? statusField.name : null;
              } catch (error) {
                console.log('‚ùå Error getting current status:', error.message);
                return null;
              }
            }
            
            // Main automation logic
            console.log(`üöÄ Starting automation for ${context.eventName} event`);
            
            if (context.eventName === 'issues') {
              const action = context.payload.action;
              const issue = context.payload.issue;
              const issueId = issue.node_id;
              
              console.log(`üìù Processing issue #${issue.number}: "${issue.title}"`);
              console.log(`   Action: ${action}`);
              console.log(`   Issue ID: ${issueId}`);
              
              // Ensure issue is added to project
              let itemId = await getProjectItemId(issueId);
              if (!itemId) {
                console.log(`üîÑ Issue not in project, adding...`);
                itemId = await addToProject(issueId);
                if (itemId) {
                  console.log(`‚úÖ Added issue #${issue.number} to project`);
                } else {
                  console.log(`‚ùå Failed to add issue #${issue.number} to project`);
                  return;
                }
              } else {
                console.log(`‚úÖ Issue #${issue.number} already in project`);
              }
              
              if (itemId) {
                // Smart status transitions based on action
                if (action === 'opened') {
                  console.log(`üÜï New issue opened, moving to Backlog`);
                  await updateItemStatus(itemId, 'Backlog');
                } else if (action === 'assigned') {
                  console.log(`üë§ Issue assigned, moving to Ready`);
                  await updateItemStatus(itemId, 'Ready');
                } else if (action === 'closed') {
                  console.log(`‚úÖ Issue closed, moving to Done`);
                  await updateItemStatus(itemId, 'Done');
                } else if (action === 'labeled') {
                  const label = context.payload.label;
                  console.log(`üè∑Ô∏è Label added: ${label.name}`);
                  
                  if (label.name === 'ready') {
                    await updateItemStatus(itemId, 'Ready');
                  } else if (label.name === 'in-progress') {
                    await updateItemStatus(itemId, 'In Progress');
                  } else if (label.name === 'blocked') {
                    await updateItemStatus(itemId, 'Blocked');
                  } else if (label.name === 'needs-review') {
                    await updateItemStatus(itemId, 'In Review');
                  } else if (label.name === 'priority-high') {
                    const currentStatus = await getCurrentItemStatus(itemId);
                    if (currentStatus === 'Backlog') {
                      console.log(`üöÄ High priority item, promoting from Backlog to Ready`);
                      await updateItemStatus(itemId, 'Ready');
                    }
                  }
                }
              }
            }
            
            if (context.eventName === 'pull_request') {
              const action = context.payload.action;
              const pr = context.payload.pull_request;
              const prId = pr.node_id;
              
              console.log(`üîç Processing PR #${pr.number}: "${pr.title}"`);
              console.log(`   Action: ${action}`);
              console.log(`   PR ID: ${prId}`);
              
              // Ensure PR is added to project
              let itemId = await getProjectItemId(prId);
              if (!itemId) {
                console.log(`üîÑ PR not in project, adding...`);
                itemId = await addToProject(prId);
                if (itemId) {
                  console.log(`‚úÖ Added PR #${pr.number} to project`);
                } else {
                  console.log(`‚ùå Failed to add PR #${pr.number} to project`);
                  return;
                }
              } else {
                console.log(`‚úÖ PR #${pr.number} already in project`);
              }
              
              if (itemId) {
                if (action === 'opened' || action === 'ready_for_review') {
                  console.log(`üìù PR ready for review, moving to In Review`);
                  await updateItemStatus(itemId, 'In Review');
                } else if (action === 'converted_to_draft') {
                  console.log(`üìù PR converted to draft, moving to In Progress`);
                  await updateItemStatus(itemId, 'In Progress');
                } else if (action === 'closed') {
                  if (pr.merged) {
                    console.log(`üéâ PR merged, moving to Done`);
                    await updateItemStatus(itemId, 'Done');
                    
                    // Auto-close and move linked issues
                    const body = pr.body || '';
                    const issueNumbers = [...body.matchAll(/(?:closes|fixes|resolves)\s+#(\d+)/gi)]
                      .map(match => parseInt(match[1]));
                    
                    console.log(`üîó Found ${issueNumbers.length} linked issues: ${issueNumbers}`);
                    
                    for (const issueNumber of issueNumbers) {
                      try {
                        console.log(`üîÑ Processing linked issue #${issueNumber}...`);
                        
                        // Close the issue
                        await github.rest.issues.update({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: issueNumber,
                          state: 'closed'
                        });
                        
                        // Get issue details and move to Done
                        const issueResponse = await github.rest.issues.get({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: issueNumber
                        });
                        
                        const linkedIssueId = issueResponse.data.node_id;
                        let linkedItemId = await getProjectItemId(linkedIssueId);
                        
                        if (!linkedItemId) {
                          linkedItemId = await addToProject(linkedIssueId);
                        }
                        
                        if (linkedItemId) {
                          await updateItemStatus(linkedItemId, 'Done');
                        }
                        
                        console.log(`‚úÖ Auto-closed and moved issue #${issueNumber} to Done`);
                      } catch (error) {
                        console.log(`‚ùå Failed to process linked issue #${issueNumber}:`, error.message);
                      }
                    }
                  } else {
                    console.log(`üìù PR closed without merge, moving back to Todo`);
                    await updateItemStatus(itemId, 'Todo');
                  }
                }
              }
            }
            
            console.log(`üéØ Automation completed for ${context.eventName} event`);