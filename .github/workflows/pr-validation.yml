name: PR Validation

on:
  pull_request:
    types: [opened, edited, synchronize, ready_for_review]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Check PR links to issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prBody = context.payload.pull_request.body || '';
            const prTitle = context.payload.pull_request.title || '';
            
            // Check for issue references
            const issuePattern = /(?:closes|fixes|resolves|implements)\s+#(\d+)|AIRA-(\d+)/gi;
            const hasIssueRef = issuePattern.test(prBody + ' ' + prTitle);
            
            if (!hasIssueRef) {
              core.setFailed('‚ùå PR must reference an issue using "Closes #12" or mention "AIRA-12"');
              return;
            }
            
            console.log('‚úÖ PR references an issue');

      - name: Validate branch name
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "üîç Checking branch name: $BRANCH_NAME"
          
          # Flexible pattern allowing descriptive names
          if [[ $BRANCH_NAME =~ ^AIRA-[0-9]+.*$ ]] || \
             [[ $BRANCH_NAME =~ ^(hotfix|docs|feature)/AIRA-[0-9]+.*$ ]] || \
             [[ $BRANCH_NAME =~ ^(hotfix|docs)/.+$ ]]; then
            echo "‚úÖ Branch name follows convention: $BRANCH_NAME"
          else
            echo "‚ùå Branch name must follow one of these patterns:"
            echo "  - AIRA-X or AIRA-X-description (feature branches)"  
            echo "  - hotfix/AIRA-X or hotfix/description (hotfixes)"
            echo "  - docs/AIRA-X or docs/description (documentation)"
            echo "  - feature/AIRA-X-description (feature branches)"
            echo ""
            echo "Your branch: $BRANCH_NAME"
            exit 1
          fi

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          
      - name: Run tests
        run: |
          # Run pytest if tests exist, otherwise basic validation
          if [ -d "tests" ] && find tests -name "*.py" -type f | grep -q .; then
            echo "üß™ Running pytest..."
            pytest tests/ -v
          else
            echo "üì¶ No tests found, checking Python syntax..."
            python -c "
              import sys
              import py_compile
              import glob
              python_files = glob.glob('**/*.py', recursive=True)
              if python_files:
                  for file in python_files[:10]:
                      try:
                          py_compile.compile(file, doraise=True)
                          print(f'‚úÖ {file} - valid syntax')
                      except py_compile.PyCompileError as e:
                          print(f'‚ùå {file} - syntax error')
                          sys.exit(1)
                  print('‚úÖ All Python files have valid syntax')
              else:
                  print('‚úÖ No Python files to validate')
              "

  security-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run basic security checks
        run: |
          echo "üîç Basic security scan..."
          # Check for common secrets patterns
          if grep -r -i "password\s*=" . --include="*.py" --include="*.js" --include="*.yaml" --include="*.yml" | grep -v ".git" | head -5; then
            echo "‚ö†Ô∏è Found potential hardcoded passwords"
          fi
          
          if grep -r -i "api[_-]key\s*=" . --include="*.py" --include="*.js" --include="*.yaml" --include="*.yml" | grep -v ".git" | head -5; then
            echo "‚ö†Ô∏è Found potential hardcoded API keys"
          fi
          
          echo "‚úÖ Basic security scan completed"